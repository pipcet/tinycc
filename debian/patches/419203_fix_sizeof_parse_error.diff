From: Thomas Preud'homme <robotux@celest.fr>
Date: Sat, 13 Mar 2010 18:10:17 +0100
Subject: [PATCH] 419203_fix_sizeof_parse_error.diff

---
 tccgen.c        |   43 +++++++++++++++++++++++++++++++++++++++++++
 tests/tcctest.c |    4 ++++
 2 files changed, 47 insertions(+), 0 deletions(-)

diff --git a/tccgen.c b/tccgen.c
index b4b5d59..266fb51 100644
--- a/tccgen.c
+++ b/tccgen.c
@@ -3115,7 +3115,50 @@ static void unary(void)
         t = tok;
         next();
         if (tok == '(') {
+/* Beginning of sizeof parsing error correction */
+            int tbis = tok;
+            uint8_t *p = file->buf_ptr;
             parse_expr_type(&type);
+/* if we met sizeof (*fct)(param) or sizeof (identifier)[index] */
+            if (((type.t & VT_BTYPE) == VT_FUNC) && (tok == '(')) {
+                    file->buf_ptr = p;
+                    tok = tbis;
+                    tbis = '(';
+                    skip('(');
+                    file->buf_ptr -= 2;
+/* Add of parenthesis to frame (*fct)(param) : could partially erase sizeof */
+                    *(file->buf_ptr-1) = '(';
+                    while (*file->buf_ptr != ')') {
+                        *file->buf_ptr = *(file->buf_ptr+1);
+                        file->buf_ptr++;
+                    }
+                    do {
+                        *file->buf_ptr = *(file->buf_ptr+1);
+                        file->buf_ptr++;
+                    } while (*file->buf_ptr != ')');
+/* Make like nothing happen and launch parsing again */
+                    file->buf_ptr = p-2;
+                    type.t = VT_PTR | VT_ARRAY;
+                    tok = '(';
+                    expr_type(&type);
+            } else if (((type.t & VT_BTYPE) == VT_PTR) && (tok == '[')) {
+                    file->buf_ptr = p;
+                    tok = tbis;
+                    tbis = '[';
+                    skip('(');
+                    p = file->buf_ptr;
+/* Moving parenthesis from (identifier)[index] to (indentifier[index]) */
+                    while (*file->buf_ptr != ']') {
+                        *file->buf_ptr = *(file->buf_ptr+1);
+                        file->buf_ptr++;
+                    }
+/* Make like nothing happen and launch parsing again */
+                    *file->buf_ptr = ')';
+                    file->buf_ptr = p;
+                    expr_type(&type);
+                    skip(')');
+                }
+/* End of sizeof parsing error correction */
         } else {
             unary_type(&type);
         }
diff --git a/tests/tcctest.c b/tests/tcctest.c
index a2d481a..9deef62 100644
--- a/tests/tcctest.c
+++ b/tests/tcctest.c
@@ -1953,6 +1953,8 @@ void sizeof_test(void)
 {
     int a;
     int **ptr;
+    int array[2];
+    int (*func)(int) = fib;
 
     printf("sizeof(int) = %d\n", sizeof(int));
     printf("sizeof(unsigned int) = %d\n", sizeof(unsigned int));
@@ -1968,6 +1970,8 @@ void sizeof_test(void)
     printf("a=%d\n", a);
     ptr = NULL;
     printf("sizeof(**ptr) = %d\n", sizeof (**ptr));
+    printf("sizeof(array)[0] = %d\n", sizeof(array)[0]);
+    printf("sizeof(*func)(4) = %d\n", sizeof(*func)(4));
 
     /* some alignof tests */
     printf("__alignof__(int) = %d\n", __alignof__(int));
-- 
