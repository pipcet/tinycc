From fb3453f0f66ce82ceb6759cc915b034cf4b47188 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Daniel=20Gl=C3=B6ckner?= <daniel-gl@gmx.net>
Date: Fri, 14 May 2010 13:07:59 +0200
Subject: Allow jumps > 32MB for -run on ARM

This patch is needed to reach tinycc's PLT from the compiled program.
It fix a build failure on arm (see:
https://buildd.debian.org/fetch.cgi?pkg=tcc&arch=armel&ver=0.9.25-3&stamp=1273440303&file=log
and
http://lists.nongnu.org/archive/html/tinycc-devel/2011-05/msg00003.html

Origin: commit: 741841d863be13
Bug-Debian: http://bugs.debian.org/592618
Forwarded:
http://repo.or.cz/w/tinycc.git/commit/741841d863be133d4fba91933fdd83dec7a83112
Last-Update: 2011-05-12
Applied-Upstream: 741841d863be133d4fba91933fdd83dec7a83112
---
 libtcc.c |    4 ++--
 tcc.h    |    4 +++-
 tccelf.c |   18 ++++++++++++++++++
 3 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/libtcc.c b/libtcc.c
index f3cd421..95e0313 100644
--- a/libtcc.c
+++ b/libtcc.c
@@ -1659,7 +1659,7 @@ int tcc_relocate(TCCState *s1, void *ptr)
     if (s1->nb_errors)
         return -1;
 
-#ifdef TCC_TARGET_X86_64
+#ifdef (defined TCC_TARGET_X86_64 || defined TCC_TARGET_ARM) && !defined TCC_TARGET_PE
     s1->runtime_plt_and_got_offset = 0;
     s1->runtime_plt_and_got = (char *)(mem + offset);
     /* double the size of the buffer for got and plt entries
@@ -1692,7 +1692,7 @@ int tcc_relocate(TCCState *s1, void *ptr)
         if (s->sh_flags & SHF_EXECINSTR)
             set_pages_executable(ptr, length);
     }
-#ifdef TCC_TARGET_X86_64
+#ifdef (defined TCC_TARGET_X86_64 || defined TCC_TARGET_ARM) && !defined TCC_TARGET_PE
     set_pages_executable(s1->runtime_plt_and_got,
                          s1->runtime_plt_and_got_offset);
 #endif
diff --git a/tcc.h b/tcc.h
index 269f1d5..6d621c0 100644
--- a/tcc.h
+++ b/tcc.h
@@ -484,11 +484,13 @@ struct TCCState {
     /* for tcc_relocate */
     int runtime_added;
 
-#ifdef TCC_TARGET_X86_64
+#ifndef TCC_TARGET_PE
+#if defined TCC_TARGET_X86_64 || defined TCC_TARGET_ARM
     /* write PLT and GOT here */
     char *runtime_plt_and_got;
     unsigned int runtime_plt_and_got_offset;
 #endif
+#endif
 };
 
 /* The current value can be: */
diff --git a/tccelf.c b/tccelf.c
index 96c641e..82850b4 100644
--- a/tccelf.c
+++ b/tccelf.c
@@ -479,6 +479,7 @@ static void relocate_syms(TCCState *s1, int do_resolve)
     }
 }
 
+#ifndef TCC_TARGET_PE
 #ifdef TCC_TARGET_X86_64
 #define JMP_TABLE_ENTRY_SIZE 14
 static unsigned long add_jmp_table(TCCState *s1, unsigned long val)
@@ -501,6 +502,18 @@ static unsigned long add_got_table(TCCState *s1, unsigned long val)
     *p = val;
     return (unsigned long)p;
 }
+#elif defined TCC_TARGET_ARM
+#define JMP_TABLE_ENTRY_SIZE 8
+static int add_jmp_table(TCCState *s1, int val)
+{
+    uint32_t *p = (uint32_t *)(s1->runtime_plt_and_got + s1->runtime_plt_and_got_offset);
+    s1->runtime_plt_and_got_offset += JMP_TABLE_ENTRY_SIZE;
+    /* ldr pc, [pc, #-4] */
+    p[0] = 0xE51FF004;
+    p[1] = val;
+    return (int)p;
+}
+#endif
 #endif
 
 /* relocate a given section (CPU dependent) */
@@ -595,6 +608,11 @@ static void relocate_section(TCCState *s1, Section *s)
                     x -= 0x1000000;
                 x *= 4;
                 x += val - addr;
+#ifndef TCC_TARGET_PE
+                if((x & 3) != 0 || x >= 0x4000000 || x < -0x4000000)
+                    if (s1->output_type == TCC_OUTPUT_MEMORY)
+                        x += add_jmp_table(s1, val) - val; /* add veneer */
+#endif
                 if((x & 3) != 0 || x >= 0x4000000 || x < -0x4000000)
                     error("can't relocate value at %x",addr);
                 x >>= 2;
-- 
1.7.5.1

