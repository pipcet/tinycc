From 1384a696f4fe2595c1bf8e20b9d47e6da1a1f26b Mon Sep 17 00:00:00 2001
From: Thomas Preud'homme <robotux@celest.fr>
Date: Wed, 4 Jan 2012 14:29:08 +0100
Subject: Fix linkage of named file in loader script.

Remove the previous logic to link a named file with a loader script by
using tcc_add_dll instead. Hence, all files can be linked, not only
files ending in .so/.def.

Origin: vendor
Bug-Debian: http://bugs.debian.org/654528
Forwarded: http://lists.nongnu.org/archive/html/tinycc-devel/2012-01/msg00009.html
Last-Update: 2012-01-04
Applied-Upstream: commit: 83d57c06f406bbb7198b1683fc522f23251b5f57
---
 tccelf.c |   61 +++++++++----------------------------------------------------
 1 files changed, 9 insertions(+), 52 deletions(-)

diff --git a/tccelf.c b/tccelf.c
index 26ffe09..a9ef743 100644
--- a/tccelf.c
+++ b/tccelf.c
@@ -2770,48 +2770,6 @@ char *tcc_strcpy_part(char *out, const char *in, size_t num)
 }
 
 /*
- * Extract the library name from the file name
- * Return 0 if the file isn't a library
- *
- * /!\ No test on filename capacity, be careful
- */
-static int filename_to_libname(TCCState *s1, const char filename[], char libname[])
-{
-    char *ext;
-    int libprefix;
-
-    /* already converted to library name */
-    if (libname[0] != '\0')
-        return 1;
-    ext = tcc_fileextension(filename);
-    if (*ext == '\0')
-        return 0;
-    libprefix = !strncmp(filename, "lib", 3);
-    if (!s1->static_link) {
-#ifdef TCC_TARGET_PE
-        if (!strcmp(ext, ".def")) {
-            size_t len = ext - filename;
-            tcc_strcpy_part(libname, filename, len);
-            return 1;
-        }
-#else
-        if (libprefix && (!strcmp(ext, ".so"))) {
-            size_t len = ext - filename - 3;
-            tcc_strcpy_part(libname, filename + 3, len);
-            return 1;
-        }
-#endif
-    } else {
-        if (libprefix && (!strcmp(ext, ".a"))) {
-            size_t len = ext - filename - 3;
-            tcc_strcpy_part(libname, filename + 3, len);
-            return 1;
-        }
-    }
-    return 0;
-}
-
-/*
  * Extract the file name from the library name
  *
  * /!\ No test on filename capacity, be careful
@@ -2829,15 +2787,13 @@ static void libname_to_filename(TCCState *s1, const char libname[], char filenam
     }
 }
 
-static int ld_add_file(TCCState *s1, const char filename[], char libname[])
+static int ld_add_file(TCCState *s1, const char filename[])
 {
     int ret;
 
     ret = tcc_add_file_internal(s1, filename, 0);
-    if (ret) {
-        if (filename_to_libname(s1, filename, libname))
-            ret = tcc_add_library(s1, libname);
-    }
+    if (ret)
+        ret = tcc_add_dll(s1, filename, 0);
     return ret;
 }
 
@@ -2883,7 +2839,7 @@ static int ld_add_file_list(TCCState *s1, const char *cmd, int as_needed)
             error_noabort("filename expected");
             ret = -1;
             goto lib_parse_error;
-        } 
+        }
         if (!strcmp(filename, "AS_NEEDED")) {
             ret = ld_add_file_list(s1, cmd, 1);
             if (ret)
@@ -2891,13 +2847,14 @@ static int ld_add_file_list(TCCState *s1, const char *cmd, int as_needed)
         } else {
             /* TODO: Implement AS_NEEDED support. Ignore it for now */
             if (!as_needed) {
-                ret = ld_add_file(s1, filename, libname);
+                ret = ld_add_file(s1, filename);
                 if (ret)
                     goto lib_parse_error;
                 if (group) {
                     /* Add the filename *and* the libname to avoid future conversions */
                     dynarray_add((void ***) &libs, &nblibs, tcc_strdup(filename));
-                    dynarray_add((void ***) &libs, &nblibs, tcc_strdup(libname));
+                    if (libname[0] != '\0')
+                        dynarray_add((void ***) &libs, &nblibs, tcc_strdup(libname));
                 }
             }
         }
@@ -2910,8 +2867,8 @@ static int ld_add_file_list(TCCState *s1, const char *cmd, int as_needed)
         while (new_undef_syms()) {
             int i;
 
-            for (i = 0; i < nblibs; i += 2)
-                ld_add_file(s1, libs[i], libs[i+1]);
+            for (i = 0; i < nblibs; i ++)
+                ld_add_file(s1, libs[i]);
         }
     }
 lib_parse_error:
